0. Вступление про фаззинг.

Познакомился с фазз-тестированием. Исторический путь - как к нему пришли, какие есть варианты, обзор инструментов и т.д. Остановился на библиотеке atheris для python. Это open sourse проект Google. Google сделал фазз-тестирование для python на основе библиотеки libFuzzer (написана на C/C++, является частью инфраструктуры компилятора LLVM). Чем интересен libFuzzer? Сам фаззинг (как способ тестирования путем подачи на вход программы множества "мусорных" данных) появился в 90-е годы (некоторые считают, что прообраз был уже в 60-е). Но до 2013 года он развивался как "black-box" фазинг. Проблема в "black-box" в том, что нам непонятен процент покрытия кода программы фазз-тестами. В 2013 году был придуман "feedback-driven fuzzing", то есть фаззинг, управляемый обратной связью. AFL (American Fuzzy Lop) - самый популярный представитель такого вида "фазеров". В качестве обратной связи используется покрытие программы тестами. "Фазер" на основе набора тестовых данных ("corpus") запускает тесты, проверяет тестовое покрытие, производит "мутацию" тестов (есть очень много вариантов мутаций, например, удалить какой-либо бит). Отслеживаются тесты, которые добавляют покрытие и в "corpus" остаются такие тесты, которые затрагивают максимальное число веток программы (при этом может быть "редукция" - это уменьшение числа тестовых данных с сохранением покрытия). Далее такой цикл повторяется бесконечно или останавливается по каким-либо заданным условиям (количество отработанных тестов, прошедшее время, процент покрытия и т.п.). Самый первый набор данных может быть пустой, но лучше его задавать, включая в него тестовые примеры, желательно небольшие для скорости фаззинга и такие, чтобы охватить максимально все ветки программы и "крайние" случаи. Это позволит провести фаззинг намного более эффективно.


1. Практика фазз-тестирования.

1.1. Взял программу, которая парсит pdf (парсит счета в pdf формате, которые, по сути, множество таблиц) и выбирает из pdf определенные строки. Была идея, что смогу менять входной pdf, но отказался, так как сложно, да и использую на входе готовую библиотеку для работы с pdf, соответственно, тестировал бы её. Попробовал потестировать одну из своих функций (программа построена как цепочка генераторов: первый генератор - это готовая библиотека pdfrw, далее мои генераторы). Больше разбирался с пониманием, как запускать "фазер". Запустил в результате с пустым. 

Тестирующий модуль:
=========================================================
import atheris

with atheris.instrument_imports():
    import sys
    import zlib

    from pdf_parsing_new import stream_decoding

def TestOneInput(data):
    data_for_testing = [{}]
    data_for_testing[0]["object_type"] = "stream_line"
    data_for_testing[0]["flags"] = {"filter": True}
    data_for_testing[0]["stream_line"] = zlib.compress(data)
    # data_for_testing[0]["stream_line"] = data
    for result in stream_decoding(data_for_testing):
        print(result)

atheris.Setup(sys.argv, TestOneInput)
atheris.Fuzz()
=========================================================

Результат тестирования:
=========================================================
INFO: Instrumenting pdf_parsing_new
INFO: Instrumenting csv
INFO: Instrumenting glob
INFO: Instrumenting fnmatch
INFO: Instrumenting encodings.cp1251
INFO: Using built-in libfuzzer
WARNING: Failed to find function "__sanitizer_acquire_crash_state".
WARNING: Failed to find function "__sanitizer_print_stack_trace".
WARNING: Failed to find function "__sanitizer_set_death_callback".
INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 1004806109
INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
INFO: A corpus is not provided, starting from an empty corpus
#2      INITED cov: 6 ft: 6 corp: 1/1b exec/s: 0 rss: 39Mb
#65536  pulse  cov: 6 ft: 6 corp: 1/1b lim: 652 exec/s: 21845 rss: 39Mb
#131072 pulse  cov: 6 ft: 6 corp: 1/1b lim: 1300 exec/s: 13107 rss: 39Mb
^CKeyboardInterrupt: stopping.
=========================================================

Вывод: вероятность "попадания" таким случайным образом в целевую последовательность крайне мала (нужно, чтобы совпал длинный текст, а потом еще последовательность из коротких текстов). "Фаззер" "долбится" впустую буквально одиночными символами, увеличивая количество их. По-хорошему, нужно было задать исходный "corpus", но на первом примере я еще не очень понял, что это и как задавать. :)


1.2. Решил попробовать потестировать Django. Использую режим тестирования через Client (https://docs.djangoproject.com/en/5.1/topics/testing/tools/). Сначала тестировал просто приложение целиком (условно, "сыплю" случайные url на вход). 

Тестирующий модуль:
=========================================================
import atheris

with atheris.instrument_imports():

    import django
    from django.test import Client
    import sys

django.setup()

def test_my_code(data):
    url = '/' + data.decode('latin2')
    client = Client(SERVER_NAME='localhost')
    response = client.get(url)
    if response.status_code not in [200, 302, 404]:
        raise RuntimeError(f"Unexpected status code {response.status_code} for {url}")

atheris.Setup(sys.argv, test_my_code)
atheris.Fuzz()
=========================================================

Результат тестирования:
=========================================================
...
#523    REDUCE cov: 906 ft: 983 corp: 28/74b lim: 4 exec/s: 15 rss: 114Mb L: 3/4 MS: 4 CopyPart-EraseBytes-ShuffleBytes-ChangeBit-
Not Found: /%/%=
Not Found: /%/%=
Not Found: /%/%
Not Found: /%
...
Not Found: /%
Not Found: /%
Not Found: /%
 === Uncaught Python exception: ===
ValueError: Invalid IPv6 URL
Traceback (most recent call last):
  File "/home/kaa/motor-pool/fuzz.py", line 15, in test_my_code
    response = client.get(url)
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/django/test/client.py", line 1038, in get
    path,
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/django/test/client.py", line 463, in get
    """Construct a GET request."""
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/django/test/client.py", line 581, in generic
    def generic(
  File "/usr/lib/python3.10/urllib/parse.py", line 381, in urlparse
    """Parse a URL into 6 components:
  File "/usr/lib/python3.10/urllib/parse.py", line 485, in urlsplit
    scheme = scheme.replace(b, "")
ValueError: Invalid IPv6 URL

==166084== ERROR: libFuzzer: fuzz target exited
SUMMARY: libFuzzer: fuzz target exited
MS: 4 PersAutoDict-CrossOver-CopyPart-CMP- DE: "/%"-"/["-; base unit: 4e4b5cc5015909e6063365f073464987fd08091f
0x2f,0x5b,0x2f,0x25,
/[/%
artifact_prefix='./'; Test unit written to ./crash-7034995475779954f682aec6c2afd03cc60772a4
Base64: L1svJQ==
=========================================================

Это приблизительно через 5 минут работы "фазера" такое. Обрадовался сначала: всё работает и нашёл ошибку в самом Django (даже не в своей программе!). Но при ближайшем рассмотрении понял, что client.get(url) отправляет URL "как есть", а строки из реального браузера пройдут сначала через функцию quote, где "опасные" символы будут заменены на процент + код:
=========================================================
>>> from urllib.parse import quote
>>> quote('/[/%')
'/%5B/%25'
=========================================================

И вместо http://127.0.0.1:8080//[/% будет http://127.0.0.1:8080/%5B/%25, что исключения не вызывает. Забавно, что при разбирании нашёл статью (https://medium.com/swlh/fuzzing-django-applications-with-the-atheris-fuzzing-engine-ace18f262ae0), где просто вбили в код:
url = url.replace('[', '%5B').replace(']', '%5D')

Вывод: Получилось увидеть полноценно работу "фазера" и нахождение ошибки. Работает даже без начального заполнения "corpus". Увидел, что это работает даже на больших программах (всё django поместил: инициализация перед тестированием была долгой). Но для теста конкретного класса из views.py нужно запускать по-другому: так не дойдёт до конкретного класса или будет крайне долго идти.

Дополнительно с чем столкнулся (не связанным с фаззингом): при вызове Client() получал ошибку
Invalid HTTP_HOST header: 'testserver'. You may need to add 'testserver' to ALLOWED_HOSTS.
Но добавление 'testserver' в ALLOWED_HOSTS не помогло. Помог только вызов Client(SERVER_NAME='localhost')


1.3. Решил проверить конкретный класс. Взял класс, у которого уменьшал цикломатическую сложность.

Тестирующий модуль:
=========================================================
import atheris
import sys
from typing import Tuple

with atheris.instrument_imports():

    from django import setup
    from django.test import Client
    from urllib.parse import quote

setup()


def get_input(data: bytes) -> Tuple[int, str, str, str]:
    fdp = atheris.FuzzedDataProvider(data)
    max_len = 20
    return (
        # Значение 8 => будет возвращать значение типа int64
        # По сути это число байт в int
        # поддерживаются 0, 1, 2, 4, 8
        fdp.ConsumeInt(8),
        fdp.ConsumeBytes(max_len),
        fdp.ConsumeBytes(max_len),
        fdp.ConsumeBytes(max_len),
        fdp.ConsumeBytes(max_len)
    )


def test_my_code(data):
    data_tuple = get_input(data)
    url = (
            '/api/report-mileage/'
            + str(data_tuple[0])
            +'/'
            + quote(data_tuple[1])
            + '/'
            + quote(data_tuple[2])
            + '/'
            + quote(data_tuple[3])
            + '/'
    )
    client = Client(SERVER_NAME='localhost')
    try:
        response = client.get(url)
    except Exception as e:
        print(f"{data_tuple=} {url=}")
        print(f"{e=}")
        assert False, f'Error {e=}'
    if response.status_code not in [200, 302, 404]:
        raise RuntimeError(f"Unexpected status code {response.status_code} for {url}")

atheris.Setup(sys.argv, test_my_code)
atheris.Fuzz()
=========================================================

Результат тестирования:
=========================================================
...
Not Found: /api/report-mileage/2301450309347368/_(      %F6
///
Not Found: /api/report-mileage/2390372638523402////
Not Found: /api/report-mileage/611935395461991080////
Not Found: /api/report-mileage/467820207386135208////
Not Found: /api/report-mileage/35474643158567592////
Not Found: /api/report-mileage/35474643158564872////
Internal Server Error: /api/report-mileage/11260957169280858/_%E7%E7猊%FF%FF%8E%FF%FF%C0%FF%FF%FF%EF/%FF%FF%FF_(%C9%FF%FF%FF%FF%FF%FF%FF%FF%FF%FF%FF/%FF%FF%8E/
Traceback (most recent call last):
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/django/core/handlers/exception.py", line 53, in inner
    def inner(request):
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/django/core/handlers/base.py", line 191, in _get_response
    if response is None:
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/django/views/decorators/csrf.py", line 65, in _view_wrapper
    return view_func(request, *args, **kwargs)
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/django/views/generic/base.py", line 103, in view
    )
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/django/utils/decorators.py", line 43, in _wrapper
    # 'func'. Also, wrap method.__get__() in a function because new
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/django/utils/decorators.py", line 187, in _view_wrapper
    except Exception as e:
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/django/utils/decorators.py", line 185, in _view_wrapper
    try:
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/home/kaa/motor-pool/vehicle/views.py", line 714, in get
    check_result = self.check_data(request, *args, **kwargs)
  File "/home/kaa/motor-pool/vehicle/views.py", line 634, in check_data
    Vehicle.objects.get(id=self.kwargs['vehicle'])
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/django/db/models/manager.py", line 85, in manager_method
    @wraps(method)
  File "/home/kaa/motor-pool/env/lib/python3.10/site-packages/django/db/models/query.py", line 644, in get
    clone.query.set_limits(high=limit)
vehicle.models.Vehicle.DoesNotExist: Vehicle matching query does not exist.
data_tuple=(11260957169280858, b'\x00\x00\x00_\xe7\xe7\xe7\x8c\x8a\xff\xff\x8e\xff\xff\xc0\x06\xff\xff\xff\xef', b'\xff\xff\xff_(\x00\x00\x00\xc9\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'\xff\xff\x8e', b'') url='/api/report-mileage/11260957169280858/%00%00%00_%E7%E7%E7%8C%8A%FF%FF%8E%FF%FF%C0%06%FF%FF%FF%EF/%FF%FF%FF_%28%00%00%00%C9%FF%FF%FF%FF%FF%FF%FF%FF%FF%FF%FF/%FF%FF%8E/'
e=DoesNotExist('Vehicle matching query does not exist.')

 === Uncaught Python exception: ===
AssertionError: Error e=DoesNotExist('Vehicle matching query does not exist.')
Traceback (most recent call last):
  File "/home/kaa/motor-pool/fuzz2.py", line 49, in test_my_code
    assert False, f'Error {e=}'
AssertionError: Error e=DoesNotExist('Vehicle matching query does not exist.')

==123238== ERROR: libFuzzer: fuzz target exited
SUMMARY: libFuzzer: fuzz target exited
MS: 5 ShuffleBytes-InsertRepeatedBytes-ChangeBit-CrossOver-CopyPart-; base unit: e164af4fd941530a198d7dc08bc003a3e9a8c5d8
0x5a,0xe7,0xe7,0xe7,0xc7,0x1,0x28,0x0,0x0,0x0,0x0,0x5f,0xe7,0xe7,0xe7,0x8c,0x8a,0xff,0xff,0x8e,0xff,0xff,0xc0,0x6,0xff,0xff,0xff,0xef,0xff,0xff,0xff,0x5f,0x28,0x0,0x0,0x0,0xc9,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x8e,
Z\347\347\347\307\001(\000\000\000\000_\347\347\347\214\212\377\377\216\377\377\300\006\377\377\377\357\377\377\377_(\000\000\000\311\377\377\377\377\377\377\377\377\377\377\377\377\377\216
artifact_prefix='./'; Test unit written to ./crash-6214dac04fcc0c5869109222957c38ca59e9cf70
Base64: Wufn58cBKAAAAABf5+fnjIr//47//8AG////7////18oAAAAyf////////////////+O
=========================================================

Вывод: удалось получить ошибку при запуске без начального "corpus". Время работы фаззера минут 10. Разобрался, как подавать на вход более сложную структуру с помощью FuzzedDataProvider. Сама ошибка простая, это я после рефакторинга поленился с тестами и проверил только нормальный вариант, а вариант, когда автомобиль не найден, не проверил (зато получил возможность понаблюдать работу фаззера).


2. ИТОГО. 

Фаззинг - инструмент хороший, но специфичный. Особенно необходим в тех частях программ, которые взаимодействуют "с внешним миром", куда, естественно, может подаваться совершенно разное (браузеры, парсеры, протоколы и т.п.). Тестируем на разные сбои. Отдельно можно выделить тестирование, когда у нас есть пара программ для преобразования "туда-обратно" (зашифровали-расшифровали, запаковали в архив - распаковали и т.д.). Для такого возможно набор данных, подаваемых фаззингом, преобразовать "туда-обратно" и сравнить с исходным. Также хорошо тестировать в ситуациях, когда есть разные программы, которые делают одно и то же (можно сравнивать результаты). 

Из своего небольшого набора попыток вижу, что фазз-тестирование полезный инструмент и работает даже в таком упрощённом варианте (без исходного "corpus'а"). Думаю, что в подходящих случаях буду пользоваться, плюс, конечно, эта "кроличья нора" глубокая: правильная подготовка первичного "corpus" и настройка сильно влияет на тестирование (ещё не опробованы "санитайзеры"; можно пробовать "corpus" по-разному задавать; смотреть, как будет работать, если только конкретную функцию задавать в блоке "with atheris.instrument_imports()"; свои настройки мутаций можно пробовать; задавать настройки завершения по времени, количеству итераций, покрытию; добавить модуль coverage для визуализации процесса и т.п.). Написал статью про фазз-тестирование в свой блог.


3. "Литература", которая понравилась)
3.1. История фазз-тестирования, про libFuzzer, про corpus, мутации, приведен цикл разработки google.
https://habr.com/ru/companies/dsec/articles/517596/
3.2. Примеры работы с atheris (пошире, чем readme в репозитории atheris, пользовался для разбирания в работе atheris)
https://seeinglogic.com/posts/intro-to-atheris/ (часть 1)
https://seeinglogic.com/posts/checking-on-chatgpt/ (часть 2)
